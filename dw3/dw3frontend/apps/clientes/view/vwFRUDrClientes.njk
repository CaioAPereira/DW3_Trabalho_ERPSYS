{% extends "templates/base.html" %}

{% block content %}
<div x-data="clienteForm()">
  <ol class="breadcrumb mb-2">
    <li class="breadcrumb-item active">{{title}}</li>
  </ol>
  <div class="row">
    <div class="col-12">

      <div class="card-header">
        {{title}}
      </div>

      <div class="card-body">
        <div class="">

          <form>
            <div class="row">
              <div class="col-md-3">
                <div class="form-group">
                  <label for="cpf_cnpj">CPF/CNPJ</label>
                  <input type="text" class="form-control" id="cpf_cnpj" required="required" x-model="form.cpf_cnpj" x-bind:disabled="disabled">
                </div>
              </div>

              <div class="col-md-5">
                <div class="form-group">
                  <label for="nomeRazaoSocial">Nome / Razão Social</label>
                  <input type="text" class="form-control" id="nomeRazaoSocial" x-model="form.nomeRazaoSocial" x-bind:disabled="disabled">
                </div>
              </div>

              <div class="col-md-4">
                <div class="form-group">
                  <label for="email">E-mail</label>
                  <input type="email" class="form-control" id="email" x-model="form.email" x-bind:disabled="disabled">
                </div>
              </div>
            </div>

            <div class="form-group col-md-6 mt-3">
              <div class="form-check">
                <input class="form-check-input" type="checkbox" id="removido" x-model="form.removido" x-bind:disabled="disabled">
                <label class="form-check-label" for="removido">
                  Removido (Inativo)
                </label>
              </div>
            </div>

            <button type="button" @click="updateForm()" class="btn btn-primary mt-4">Salvar</button>
            <button type="button" @click="deleteForm()" x-show="!disabled" class="btn btn-danger mt-4">Inativar (Remover)</button>
            <a href="/clientes/manutClientes" class="btn btn-info mt-4 ml-2" role="button" aria-disabled="true">Retornar</a>
          </form>

          <div class="mt-3">
            <template x-if="message">
              <div :class="messageClass" x-text="message"></div>
            </template>
          </div>
        </div>

      </div>
    </div>
  </div>
</div>

<script>

  window.onload = function () {
    windowOnLoad();

    const localErro = "{{erro}}";
    if (localErro != "") {
      alert("[vwClientes|onload] Servidor retornou o erro:" + localErro);
    }
    // Foco inicial atualizado
    $("#cpf_cnpj").focus();
  };

  // Função Alpine.js atualizada para 'removido' e 'cpf_cnpj'
  function clienteForm() {
    return {
      form: {
        clienteid: "{{data.clienteid}}",
        cpf_cnpj: "{{data.cpf_cnpj}}", // Campo atualizado
        nomeRazaoSocial: "{{data.nomeRazaoSocial}}",
        email: "{{data.email}}",
        removido: {{data.removido | dump | safe }} // Campo atualizado
      },
      message: '',
      messageClass: '',
      disabled: {{disabled}},

      async updateForm() {
        try {
          const response = await fetch('/clientes/UpdateClientes', {
            method: 'POST',
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify(this.form)
          });

          const result = await response.json();
          if (result.status == "ok") {
            alert("Cliente atualizado com sucesso");
          } else {
            const errorData = result.status;
            this.message = `Erro! Não foi possível atualizar os dados do cliente devido ao erro: ${errorData}`;
            this.messageClass = 'alert alert-danger';
          }
        } catch (error) {
          this.message = `Erro de conexão: ${error.message}`;
          this.messageClass = 'alert alert-danger';
        }
      },

      // Esta função envia o ID do cliente. O backend deve interpretar isso como
      // um comando para SETAR "Removido = true"
      async deleteForm() {
        try {
          const response = await fetch('/clientes/DeleteClientes', {
            method: 'POST',
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify(this.form) // Envia o formulário (backend usará o ID)
          });

          const result = await response.json();
          if (result.status == "ok") {
            alert("Cliente removido (inativado) com sucesso");
            window.location.href = "/clientes/manutClientes";

          } else {
            const errorData = result.status;
            this.message = `Erro! Não foi possível remover o cliente devido ao erro: ${errorData}`;
            this.messageClass = 'alert alert-danger';
          }

        } catch (error) {
          this.message = `Erro de conexão: ${error.message}`;
          this.messageClass = 'alert alert-danger';
        }
      },

      resetForm() {
        this.form = {
          cpf_cnpj: '',
          nomeRazaoSocial: '',
          email: '',
          removido: false
        };
        this.message = false;
      }
    };
  }
</script>

{% endblock %}